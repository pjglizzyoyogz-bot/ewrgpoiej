-- Brainrot Detection and Discord Webhook Script (Client-side)
local HttpService = game:GetService('HttpService')
local TeleportService = game:GetService('TeleportService')
local Players = game:GetService('Players')

-- HTTP request function (compatible with most executors)
local request = syn and syn.request
    or http and http.request
    or http_request
    or fluxus and fluxus.request
if not request then
    error(
        "No HTTP request function found! Make sure you're using a compatible executor."
    )
end

-- Discord Webhook URLs
local webhooks = {
    highValue = 'WEBHOOK1',
    secretLowValue = 'WEBHOOK2',
    mediumValue = 'WEBHOOK3',
}

-- Color palette for rotating embed colors
local colors = {
    0x00ff00,
    0xff6b35,
    0x9b59b6,
    0x3498db,
    0xe74c3c,
    0xf1c40f,
    0x1abc9c,
    0xe67e22,
}

-- Storage for detected brainrots by category
local detectedBrainrots = {
    highValue = {},
    secretLowValue = {},
    mediumValue = {},
}

-- Parse price strings into numbers
local function parsePrice(priceStr)
    if not priceStr then
        return 0
    end
    local cleanPrice = priceStr:gsub('^%$', ''):gsub('/s$', '')
    local multiplier = 1
    if cleanPrice:find('K$') then
        multiplier = 1_000
        cleanPrice = cleanPrice:gsub('K$', '')
    elseif cleanPrice:find('M$') then
        multiplier = 1_000_000
        cleanPrice = cleanPrice:gsub('M$', '')
    elseif cleanPrice:find('B$') then
        multiplier = 1_000_000_000
        cleanPrice = cleanPrice:gsub('B$', '')
    end
    local numValue = tonumber(cleanPrice)
    return numValue and (numValue * multiplier) or 0
end

local function getRandomColor()
    return colors[math.random(1, #colors)]
end

local function getPlayerCount()
    local count = 0
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            count += 1
        end
    end
    return count
end

local function getMaxPlayers()
    return Players.MaxPlayers or 50
end

-- Send embed to Discord
local function sendCategoryEmbed(webhookUrl, category, brainrots)
    if #brainrots == 0 then
        return
    end

    print(
        'Sending '
            .. category
            .. ' embed with '
            .. #brainrots
            .. ' brainrots...'
    )
    local jobId = game.JobId
    local joinScript = string.format(
        'game:GetService("TeleportService"):TeleportToPlaceInstance(109983668079237, "%s", game.Players.LocalPlayer)',
        jobId
    )
    local totalPlayers = #Players:GetPlayers()

    local titles = {
        highValue = '🧠 BRAINROTS DETECTED (' .. #brainrots .. ' Found)',
        secretLowValue = '🧠 SECRET BRAINROTS DETECTED ('
            .. #brainrots
            .. ' Found)',
        mediumValue = '🧠 BRAINROTS DETECTED (' .. #brainrots .. ' Found)',
    }

    table.sort(brainrots, function(a, b)
        return a.value > b.value
    end)
    local fields = {}

    for _, brainrot in ipairs(brainrots) do
        local rarityEmoji = brainrot.rarity == 'Secret' and '💎'
            or brainrot.rarity == 'Legendary' and '🔥'
            or brainrot.rarity == 'Epic' and '⚡'
            or '🔸'
        local nameDisplay = brainrot.mutation == 'Gold'
                and ('**' .. brainrot.displayName .. '**')
            or (
                '**'
                .. brainrot.displayName
                .. ' ('
                .. brainrot.mutation
                .. ')**'
            )
        local petInfo = string.format(
            '%s %s ➜ %s (%s) | Owner: %s',
            rarityEmoji,
            nameDisplay,
            brainrot.generation,
            brainrot.rarity,
            brainrot.owner
        )
        table.insert(fields, { name = '', value = petInfo, inline = false })
    end

    table.insert(fields, { name = '💻 Job ID', value = jobId, inline = true })
    table.insert(fields, {
        name = '👥 Players',
        value = totalPlayers .. '/' .. getMaxPlayers(),
        inline = true,
    })
    local quickJoinUrl = string.format(
        'https://fern.wtf/joiner?placeId=109983668079237&gameInstanceId=%s',
        jobId
    )
    table.insert(fields, {
        name = '🔗 Quick Join',
        value = '[Click to Join](' .. quickJoinUrl .. ')',
        inline = false,
    })
    table.insert(fields, {
        name = '📜 Join Script',
        value = '```lua\n' .. joinScript .. '\n```',
        inline = false,
    })

    local embed = {
        embeds = {
            {
                title = titles[category],
                color = getRandomColor(),
                fields = fields,
                footer = { text = 'GFH Brainrot Logger Notifications 💩' },
                timestamp = os.date('!%Y-%m-%dT%H:%M:%SZ'),
            },
        },
    }

    local data = HttpService:JSONEncode(embed)
    request({
        Url = webhookUrl,
        Method = 'POST',
        Headers = { ['Content-Type'] = 'application/json' },
        Body = data,
    })
end

-- Get plot owner
local function getPlotOwner(plot)
    local sign = plot:FindFirstChild('PlotSign')
    if not sign then
        return 'Unknown'
    end
    local gui = sign:FindFirstChild('SurfaceGui')
    if not gui then
        return 'Unknown'
    end
    local frame = gui:FindFirstChild('Frame')
    if not frame then
        return 'Unknown'
    end
    local textLabel = frame:FindFirstChild('TextLabel')
    if not textLabel then
        return 'Unknown'
    end
    return textLabel.Text:match("(.+)'s [Bb]ase") or 'Unknown'
end

-- Check animals on podiums
local function checkAnimal(animalOverhead, plotId, podiumNumber, plot)
    local displayName = animalOverhead:FindFirstChild('DisplayName')
    local mutation = animalOverhead:FindFirstChild('Mutation')
    local generationLabel = animalOverhead:FindFirstChild('Generation')
    local rarity = animalOverhead:FindFirstChild('Rarity')
    if not (displayName and mutation and generationLabel and rarity) then
        return
    end

    local displayNameText = displayName.Text
    local mutationText = mutation.Text
    local generationText = generationLabel.Text
    local rarityText = rarity.Text
    local priceValue = parsePrice(generationText)
    local ownerName = getPlotOwner(plot)

    local brainrotData = {
        displayName = displayNameText,
        mutation = mutationText,
        generation = generationText,
        rarity = rarityText,
        plotId = plotId,
        value = priceValue,
        owner = ownerName,
    }

    if priceValue >= 10_000_000 and priceValue < 100_000_000 then
        table.insert(detectedBrainrots.highValue, brainrotData)
    elseif rarityText == 'Secret' and priceValue < 1_000_000 then
        table.insert(detectedBrainrots.secretLowValue, brainrotData)
    elseif priceValue >= 1_000_000 and priceValue < 10_000_000 then
        table.insert(detectedBrainrots.mediumValue, brainrotData)
    end
end

-- === FIXED SERVER HOPPING ===
local Servers = 'https://games.roblox.com/v1/games/'
    .. game.PlaceId
    .. '/servers/Public?sortOrder=Asc&limit=100'
local Next = nil
local visitedServers = {} -- new!

local function ListServers(cursor)
    local Raw =
        game:HttpGet(Servers .. ((cursor and '&cursor=' .. cursor) or ''))
    return HttpService:JSONDecode(Raw)
end

function smartServerHop()
    print('🔎 Searching for available servers...')
    while true do
        local success, serverData = pcall(ListServers, Next)
        if not success or not serverData or not serverData.data then
            print('⚠️ Failed to get server list, retrying...')
            Next = nil
            wait(5)
        else
            for _, server in ipairs(serverData.data) do
                if
                    server.id ~= game.JobId
                    and not visitedServers[server.id]
                    and server.playing < server.maxPlayers
                then
                    visitedServers[server.id] = true -- mark as visited
                    print(
                        '✅ Hopping to: '
                            .. server.id
                            .. ' ('
                            .. server.playing
                            .. '/'
                            .. server.maxPlayers
                            .. ')'
                    )
                    TeleportService:TeleportToPlaceInstance(
                        game.PlaceId,
                        server.id,
                        Players.LocalPlayer
                    )
                    return true
                end
            end
            Next = serverData.nextPageCursor
            if not Next then
                print('♻️ All servers checked, restarting from page 1...')
                Next = nil
                wait(5)
            end
        end
        wait(1)
    end
end

-- Scan all plots
local function scanAllPlots()
    local plots = workspace:FindFirstChild('Plots')
    if not plots then
        return
    end

    detectedBrainrots.highValue, detectedBrainrots.secretLowValue, detectedBrainrots.mediumValue =
        {}, {}, {}

    for _, plot in pairs(plots:GetChildren()) do
        if plot:IsA('Model') then
            local animalPodiums = plot:FindFirstChild('AnimalPodiums')
            if animalPodiums then
                for i = 1, 28 do
                    local podium = animalPodiums:FindFirstChild(tostring(i))
                    if podium then
                        local base = podium:FindFirstChild('Base')
                        if base then
                            local spawn = base:FindFirstChild('Spawn')
                            if spawn then
                                local attachment =
                                    spawn:FindFirstChild('Attachment')
                                if attachment then
                                    local animalOverhead =
                                        attachment:FindFirstChild(
                                            'AnimalOverhead'
                                        )
                                    if animalOverhead then
                                        checkAnimal(
                                            animalOverhead,
                                            plot.Name,
                                            i,
                                            plot
                                        )
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    local totalFound = #detectedBrainrots.highValue
        + #detectedBrainrots.secretLowValue
        + #detectedBrainrots.mediumValue
    if totalFound > 0 then
        sendCategoryEmbed(
            webhooks.highValue,
            'highValue',
            detectedBrainrots.highValue
        )
        wait(1)
        sendCategoryEmbed(
            webhooks.secretLowValue,
            'secretLowValue',
            detectedBrainrots.secretLowValue
        )
        wait(1)
        sendCategoryEmbed(
            webhooks.mediumValue,
            'mediumValue',
            detectedBrainrots.mediumValue
        )
        queue_on_teleport(
            [[ wait(5) loadstring(game:HttpGet("YOUR_SCRIPT_URL"))() ]]
        )
        smartServerHop()
    else
        print('No brainrots found, hopping anyway...')
        queue_on_teleport(
            [[ wait(5) loadstring(game:HttpGet("YOUR_SCRIPT_URL"))() ]]
        )
        smartServerHop()
    end
end

-- Continuous scanner
local function continuousScanner()
    while true do
        local success, err = pcall(scanAllPlots)
        if not success then
            warn('Scan error: ' .. tostring(err))
        end
        wait(10)
    end
end

continuousScanner()
-- Brainrot Detection and Discord Webhook Script (Client-side)
local HttpService = game:GetService('HttpService')
local TeleportService = game:GetService('TeleportService')
local Players = game:GetService('Players')

-- HTTP request function (compatible with most executors)
local request = syn and syn.request
    or http and http.request
    or http_request
    or fluxus and fluxus.request
if not request then
    error(
        "No HTTP request function found! Make sure you're using a compatible executor."
    )
end

-- Discord Webhook URLs
local webhooks = {
    highValue = 'WEBHOOK1',
    secretLowValue = 'WEBHOOK2',
    mediumValue = 'WEBHOOK3',
}

-- Color palette for rotating embed colors
local colors = {
    0x00ff00,
    0xff6b35,
    0x9b59b6,
    0x3498db,
    0xe74c3c,
    0xf1c40f,
    0x1abc9c,
    0xe67e22,
}

-- Storage for detected brainrots by category
local detectedBrainrots = {
    highValue = {},
    secretLowValue = {},
    mediumValue = {},
}

-- Parse price strings into numbers
local function parsePrice(priceStr)
    if not priceStr then
        return 0
    end
    local cleanPrice = priceStr:gsub('^%$', ''):gsub('/s$', '')
    local multiplier = 1
    if cleanPrice:find('K$') then
        multiplier = 1_000
        cleanPrice = cleanPrice:gsub('K$', '')
    elseif cleanPrice:find('M$') then
        multiplier = 1_000_000
        cleanPrice = cleanPrice:gsub('M$', '')
    elseif cleanPrice:find('B$') then
        multiplier = 1_000_000_000
        cleanPrice = cleanPrice:gsub('B$', '')
    end
    local numValue = tonumber(cleanPrice)
    return numValue and (numValue * multiplier) or 0
end

local function getRandomColor()
    return colors[math.random(1, #colors)]
end

local function getPlayerCount()
    local count = 0
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            count += 1
        end
    end
    return count
end

local function getMaxPlayers()
    return Players.MaxPlayers or 50
end

-- Send embed to Discord
local function sendCategoryEmbed(webhookUrl, category, brainrots)
    if #brainrots == 0 then
        return
    end

    print(
        'Sending '
            .. category
            .. ' embed with '
            .. #brainrots
            .. ' brainrots...'
    )
    local jobId = game.JobId
    local joinScript = string.format(
        'game:GetService("TeleportService"):TeleportToPlaceInstance(109983668079237, "%s", game.Players.LocalPlayer)',
        jobId
    )
    local totalPlayers = #Players:GetPlayers()

    local titles = {
        highValue = '🧠 BRAINROTS DETECTED (' .. #brainrots .. ' Found)',
        secretLowValue = '🧠 SECRET BRAINROTS DETECTED ('
            .. #brainrots
            .. ' Found)',
        mediumValue = '🧠 BRAINROTS DETECTED (' .. #brainrots .. ' Found)',
    }

    table.sort(brainrots, function(a, b)
        return a.value > b.value
    end)
    local fields = {}

    for _, brainrot in ipairs(brainrots) do
        local rarityEmoji = brainrot.rarity == 'Secret' and '💎'
            or brainrot.rarity == 'Legendary' and '🔥'
            or brainrot.rarity == 'Epic' and '⚡'
            or '🔸'
        local nameDisplay = brainrot.mutation == 'Gold'
                and ('**' .. brainrot.displayName .. '**')
            or (
                '**'
                .. brainrot.displayName
                .. ' ('
                .. brainrot.mutation
                .. ')**'
            )
        local petInfo = string.format(
            '%s %s ➜ %s (%s) | Owner: %s',
            rarityEmoji,
            nameDisplay,
            brainrot.generation,
            brainrot.rarity,
            brainrot.owner
        )
        table.insert(fields, { name = '', value = petInfo, inline = false })
    end

    table.insert(fields, { name = '💻 Job ID', value = jobId, inline = true })
    table.insert(fields, {
        name = '👥 Players',
        value = totalPlayers .. '/' .. getMaxPlayers(),
        inline = true,
    })
    local quickJoinUrl = string.format(
        'https://fern.wtf/joiner?placeId=109983668079237&gameInstanceId=%s',
        jobId
    )
    table.insert(fields, {
        name = '🔗 Quick Join',
        value = '[Click to Join](' .. quickJoinUrl .. ')',
        inline = false,
    })
    table.insert(fields, {
        name = '📜 Join Script',
        value = '```lua\n' .. joinScript .. '\n```',
        inline = false,
    })

    local embed = {
        embeds = {
            {
                title = titles[category],
                color = getRandomColor(),
                fields = fields,
                footer = { text = 'GFH Brainrot Logger Notifications 💩' },
                timestamp = os.date('!%Y-%m-%dT%H:%M:%SZ'),
            },
        },
    }

    local data = HttpService:JSONEncode(embed)
    request({
        Url = webhookUrl,
        Method = 'POST',
        Headers = { ['Content-Type'] = 'application/json' },
        Body = data,
    })
end

-- Get plot owner
local function getPlotOwner(plot)
    local sign = plot:FindFirstChild('PlotSign')
    if not sign then
        return 'Unknown'
    end
    local gui = sign:FindFirstChild('SurfaceGui')
    if not gui then
        return 'Unknown'
    end
    local frame = gui:FindFirstChild('Frame')
    if not frame then
        return 'Unknown'
    end
    local textLabel = frame:FindFirstChild('TextLabel')
    if not textLabel then
        return 'Unknown'
    end
    return textLabel.Text:match("(.+)'s [Bb]ase") or 'Unknown'
end

-- Check animals on podiums
local function checkAnimal(animalOverhead, plotId, podiumNumber, plot)
    local displayName = animalOverhead:FindFirstChild('DisplayName')
    local mutation = animalOverhead:FindFirstChild('Mutation')
    local generationLabel = animalOverhead:FindFirstChild('Generation')
    local rarity = animalOverhead:FindFirstChild('Rarity')
    if not (displayName and mutation and generationLabel and rarity) then
        return
    end

    local displayNameText = displayName.Text
    local mutationText = mutation.Text
    local generationText = generationLabel.Text
    local rarityText = rarity.Text
    local priceValue = parsePrice(generationText)
    local ownerName = getPlotOwner(plot)

    local brainrotData = {
        displayName = displayNameText,
        mutation = mutationText,
        generation = generationText,
        rarity = rarityText,
        plotId = plotId,
        value = priceValue,
        owner = ownerName,
    }

    if priceValue >= 10_000_000 and priceValue < 100_000_000 then
        table.insert(detectedBrainrots.highValue, brainrotData)
    elseif rarityText == 'Secret' and priceValue < 1_000_000 then
        table.insert(detectedBrainrots.secretLowValue, brainrotData)
    elseif priceValue >= 1_000_000 and priceValue < 10_000_000 then
        table.insert(detectedBrainrots.mediumValue, brainrotData)
    end
end

-- === FIXED SERVER HOPPING ===
local Servers = 'https://games.roblox.com/v1/games/'
    .. game.PlaceId
    .. '/servers/Public?sortOrder=Asc&limit=100'
local Next = nil
local visitedServers = {} -- new!

local function ListServers(cursor)
    local Raw =
        game:HttpGet(Servers .. ((cursor and '&cursor=' .. cursor) or ''))
    return HttpService:JSONDecode(Raw)
end

function smartServerHop()
    print('🔎 Searching for available servers...')
    while true do
        local success, serverData = pcall(ListServers, Next)
        if not success or not serverData or not serverData.data then
            print('⚠️ Failed to get server list, retrying...')
            Next = nil
            wait(5)
        else
            for _, server in ipairs(serverData.data) do
                if
                    server.id ~= game.JobId
                    and not visitedServers[server.id]
                    and server.playing < server.maxPlayers
                then
                    visitedServers[server.id] = true -- mark as visited
                    print(
                        '✅ Hopping to: '
                            .. server.id
                            .. ' ('
                            .. server.playing
                            .. '/'
                            .. server.maxPlayers
                            .. ')'
                    )
                    TeleportService:TeleportToPlaceInstance(
                        game.PlaceId,
                        server.id,
                        Players.LocalPlayer
                    )
                    return true
                end
            end
            Next = serverData.nextPageCursor
            if not Next then
                print('♻️ All servers checked, restarting from page 1...')
                Next = nil
                wait(5)
            end
        end
        wait(1)
    end
end

-- Scan all plots
local function scanAllPlots()
    local plots = workspace:FindFirstChild('Plots')
    if not plots then
        return
    end

    detectedBrainrots.highValue, detectedBrainrots.secretLowValue, detectedBrainrots.mediumValue =
        {}, {}, {}

    for _, plot in pairs(plots:GetChildren()) do
        if plot:IsA('Model') then
            local animalPodiums = plot:FindFirstChild('AnimalPodiums')
            if animalPodiums then
                for i = 1, 28 do
                    local podium = animalPodiums:FindFirstChild(tostring(i))
                    if podium then
                        local base = podium:FindFirstChild('Base')
                        if base then
                            local spawn = base:FindFirstChild('Spawn')
                            if spawn then
                                local attachment =
                                    spawn:FindFirstChild('Attachment')
                                if attachment then
                                    local animalOverhead =
                                        attachment:FindFirstChild(
                                            'AnimalOverhead'
                                        )
                                    if animalOverhead then
                                        checkAnimal(
                                            animalOverhead,
                                            plot.Name,
                                            i,
                                            plot
                                        )
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    local totalFound = #detectedBrainrots.highValue
        + #detectedBrainrots.secretLowValue
        + #detectedBrainrots.mediumValue
    if totalFound > 0 then
        sendCategoryEmbed(
            webhooks.highValue,
            'highValue',
            detectedBrainrots.highValue
        )
        wait(1)
        sendCategoryEmbed(
            webhooks.secretLowValue,
            'secretLowValue',
            detectedBrainrots.secretLowValue
        )
        wait(1)
        sendCategoryEmbed(
            webhooks.mediumValue,
            'mediumValue',
            detectedBrainrots.mediumValue
        )
        queue_on_teleport(
            [[ wait(5) loadstring(game:HttpGet("https://raw.githubusercontent.com/pjglizzyoyogz-bot/ewrgpoiej/refs/heads/main/awe2r34t"))() ]]
        )
        smartServerHop()
    else
        print('No brainrots found, hopping anyway...')
        queue_on_teleport(
            [[ wait(5) loadstring(game:HttpGet("https://raw.githubusercontent.com/pjglizzyoyogz-bot/ewrgpoiej/refs/heads/main/awe2r34t"))() ]]
        )
        smartServerHop()
    end
end

-- Continuous scanner
local function continuousScanner()
    while true do
        local success, err = pcall(scanAllPlots)
        if not success then
            warn('Scan error: ' .. tostring(err))
        end
        wait(10)
    end
end

continuousScanner()
