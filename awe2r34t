-- Brainrot Detection and Discord Webhook Script (Client-side)
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")

-- HTTP request function (compatible with most executors)
local request = syn and syn.request or ht    local success, error = pcall(function()
        local attempts = 0
        local maxAttempts = 50  -- Try many servers before giving up
        local serversChecked = {}
        
        while attempts < maxAttempts do
            attempts = attempts + 1
            print("üîç Server search attempt " .. attempts .. "/" .. maxAttempts)
            
            local ServerList = ListServers(Next)
            if not ServerList or not ServerList.data or #ServerList.data == 0 then
                print("‚ùå No servers in list, trying next page...")
                Next = ServerList and ServerList.nextPageCursor or nil
                wait(2)
                continue
            end
            
            -- Try multiple servers from the list
            for i = 1, math.min(10, #ServerList.data) do  -- Check up to 10 servers per page
                local serverIndex = math.random(1, #ServerList.data)
                Server = ServerList.data[serverIndex]
                
                if Server and not serversChecked[Server.id] then
                    serversChecked[Server.id] = true
                    print("üîç Checking server: " .. Server.id .. " (" .. Server.playing .. "/" .. Server.maxPlayers .. " players)")
                    
                    if Server.playing < Server.maxPlayers and Server.id ~= game.JobId then
                        print("‚úÖ Found available server!")
                        print("üöÄ Teleporting to server: " .. Server.id .. " (" .. Server.playing .. "/" .. Server.maxPlayers .. " players)")
                        TeleportService:TeleportToPlaceInstance(game.PlaceId, Server.id, Players.LocalPlayer)
                        return true
                    else
                        if Server.id == game.JobId then
                            print("‚ùå Same server, skipping...")
                        else
                            print("‚ùå Server full (" .. Server.playing .. "/" .. Server.maxPlayers .. "), trying next...")
                        end
                    end
                end
            end
            
            -- Move to next page
            Next = ServerList.nextPageCursor
            if not Next then
                print("üîÑ Reached end of server list, resetting search...")
                Next = nil
            end
            
            wait(1) -- Small delay between page requests
        end
        
        print("‚ö†Ô∏è Exhausted all server search attempts")
        return false
    end)est or http_request or fluxus and fluxus.request

if not request then
    error("No HTTP request function found! Make sure you're using a compatible executor.")
end

-- Discord Webhook URLs
local webhooks = {
    highValue = "https://discord.com/api/webhooks/1420571524515102731/nhtroygawwGSM2U6ZmH2fBM8s2dtAfa3kEDRR1Q7x7bTfCqrLcXh2WjCuDubxOYDxgeS", -- 10M/s to 100M/s
    secretLowValue = "https://discord.com/api/webhooks/1420571944901939320/_4eendPWSlqgeNThqRlAQG5JrOcntU3rimQ3OMfQHwOTFMDrSeE6AZInEGpOto6hAOmc", -- Secret rarity < 1M/s
    mediumValue = "https://discord.com/api/webhooks/1420572218743853076/mn436Nx8jA2kclSJgT25JzQgImM8DV0EG6OaPprHxRqubkZAMynHXIvOdytdDLcuXOgq" -- 1M/s to 10M/s
}

-- Color palette for rotating embed colors
local colors = {
    0x00ff00, -- Green
    0xff6b35, -- Orange
    0x9b59b6, -- Purple
    0x3498db, -- Blue
    0xe74c3c, -- Red
    0xf1c40f, -- Yellow
    0x1abc9c, -- Teal
    0xe67e22  -- Dark Orange
}

-- Storage for detected brainrots by category
local detectedBrainrots = {
    highValue = {},
    secretLowValue = {},
    mediumValue = {}
}

-- Function to parse price string and convert to numerical value
local function parsePrice(priceStr)
    if not priceStr then return 0 end
    
    -- Remove $ and /s at the end
    local cleanPrice = priceStr:gsub("^%$", ""):gsub("/s$", "")
    
    local multiplier = 1
    if cleanPrice:find("K$") then
        multiplier = 1000
        cleanPrice = cleanPrice:gsub("K$", "")
    elseif cleanPrice:find("M$") then
        multiplier = 1000000
        cleanPrice = cleanPrice:gsub("M$", "")
    elseif cleanPrice:find("B$") then
        multiplier = 1000000000
        cleanPrice = cleanPrice:gsub("B$", "")
    end
    
    local numValue = tonumber(cleanPrice)
    return numValue and (numValue * multiplier) or 0
end

-- Function to get random color from palette
local function getRandomColor()
    return colors[math.random(1, #colors)]
end

-- Function to get player count (excluding local player)
local function getPlayerCount()
    local count = 0
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= Players.LocalPlayer then
            count = count + 1
        end
    end
    return count
end

-- Function to get max server size
local function getMaxPlayers()
    return Players.MaxPlayers or 50 -- Default to 50 if not available
end



-- Function to send category embed with all brainrots
local function sendCategoryEmbed(webhookUrl, category, brainrots)
    if #brainrots == 0 then return end
    
    print("Sending " .. category .. " embed with " .. #brainrots .. " brainrots...")
    
    local jobId = game.JobId
    local joinScript = string.format('game:GetService("TeleportService"):TeleportToPlaceInstance(109983668079237, "%s", game.Players.LocalPlayer)', jobId)
    local playerCount = getPlayerCount()
    local maxPlayers = getMaxPlayers()
    local totalPlayers = #Players:GetPlayers()
    
    -- Create title based on category
    local titles = {
        highValue = "üß† BRAINROTS DETECTED (" .. #brainrots .. " Found)",
        secretLowValue = "üß† SECRET BRAINROTS DETECTED (" .. #brainrots .. " Found)", 
        mediumValue = "üß† BRAINROTS DETECTED (" .. #brainrots .. " Found)"
    }
    
    local fields = {}
    
    -- Add detected brainrots section
    table.insert(fields, {
        name = "DETECTED BRAINROTS",
        value = "",
        inline = false
    })
    
    -- Sort brainrots by value (highest first)
    table.sort(brainrots, function(a, b)
        return a.value > b.value
    end)
    
    -- Add each brainrot
    for i, brainrot in ipairs(brainrots) do
        local rarityEmoji = brainrot.rarity == "Secret" and "üíé" or 
                           brainrot.rarity == "Legendary" and "üî•" or
                           brainrot.rarity == "Epic" and "‚ö°" or "üî∏"
        
        -- Format name with or without mutation
        local nameDisplay = brainrot.mutation == "Gold" and 
            string.format("**%s**", brainrot.displayName) or
            string.format("**%s (%s)**", brainrot.displayName, brainrot.mutation)
        
        local petInfo = string.format("%s %s **%s** ‚ûú **%s**\nOwner: %s", 
            rarityEmoji,
            nameDisplay,
            brainrot.generation,
            brainrot.rarity,
            brainrot.owner
        )
        
        table.insert(fields, {
            name = "",
            value = petInfo,
            inline = false
        })
    end
    
    -- Add Job ID sections
    table.insert(fields, {
        name = "üíª Job ID (PC)",
        value = jobId,
        inline = true
    })
    
    table.insert(fields, {
        name = "üì± Job ID (Mobile)", 
        value = "```\n" .. jobId .. "\n```",
        inline = true
    })
    
    table.insert(fields, {
        name = "üë• Players in game:",
        value = "```\n" .. totalPlayers .. "/" .. maxPlayers .. "\n```",
        inline = true
    })
    
    -- Add Quick Join section
    local quickJoinUrl = string.format("https://fern.wtf/joiner?placeId=109983668079237&gameInstanceId=%s", jobId)
    table.insert(fields, {
        name = "üîó Quick Join",
        value = "[Click to Join](" .. quickJoinUrl .. ")",
        inline = false
    })
    
    -- Add Join Script
    table.insert(fields, {
        name = "üìú Join Script",
        value = "```lua\n" .. joinScript .. "\n```",
        inline = false
    })
    
    local embed = {
        embeds = {{
            title = titles[category],
            color = getRandomColor(),
            fields = fields,
            footer = {
                text = "GFH Brainrot Logger Notifications üí© | https://discord.gg/aVTyZq3hU4"
            },
            timestamp = os.date("!%Y-%m-%dT%H:%M:%SZ")
        }}
    }
    
    local data = HttpService:JSONEncode(embed)
    
    local success, response = pcall(function()
        return request({
            Url = webhookUrl,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = data
        })
    end)
    
    if success then
        if response and response.Success then
            print("‚úÖ Successfully sent " .. category .. " embed to Discord!")
        else
            warn("‚ùå Discord request failed: " .. (response and tostring(response.StatusCode) or "No response"))
            if response and response.Body then
                warn("Response body: " .. tostring(response.Body))
            end
        end
    else
        warn("‚ùå Error making request: " .. tostring(response))
    end
end

-- Function to get plot owner name
local function getPlotOwner(plot)
    local plotSign = plot:FindFirstChild("PlotSign")
    if plotSign then
        local surfaceGui = plotSign:FindFirstChild("SurfaceGui")
        if surfaceGui then
            local frame = surfaceGui:FindFirstChild("Frame")
            if frame then
                local textLabel = frame:FindFirstChild("TextLabel")
                if textLabel then
                    local fullText = textLabel.Text
                    -- Extract name from "playername's Base" format and clean it
                    local ownerName = fullText:match("(.+)'s [Bb]ase")
                    return ownerName or "Unknown"
                end
            end
        end
    end
    return "Unknown"
end

-- Function to check and process animal data
local function checkAnimal(animalOverhead, plotId, podiumNumber, plot)
    if not animalOverhead then return end
    
    local displayName = animalOverhead:FindFirstChild("DisplayName")
    local mutation = animalOverhead:FindFirstChild("Mutation")
    local generationLabel = animalOverhead:FindFirstChild("Generation")
    local rarity = animalOverhead:FindFirstChild("Rarity")
    
    if not (displayName and mutation and generationLabel and rarity) then 
        return 
    end
    
    local displayNameText = displayName.Text
    local mutationText = mutation.Text
    local generationText = generationLabel.Text
    local rarityText = rarity.Text
    
    print("Found animal: " .. displayNameText .. " | Generation: " .. generationText .. " | Rarity: " .. rarityText)
    
    local priceValue = parsePrice(generationText)
    local ownerName = getPlotOwner(plot)
    
    -- Create brainrot data
    local brainrotData = {
        displayName = displayNameText,
        mutation = mutationText,
        generation = generationText,
        rarity = rarityText,
        plotId = plotId,
        value = priceValue,
        owner = ownerName
    }
    
    -- Check conditions and add to appropriate category
    if priceValue >= 10000000 and priceValue < 100000000 then
        -- 10M/s to 100M/s
        table.insert(detectedBrainrots.highValue, brainrotData)
        print("High value brainrot detected: " .. displayNameText .. " - " .. generationText)
    elseif rarityText == "Secret" and priceValue < 1000000 then
        -- Secret rarity less than 1M/s
        table.insert(detectedBrainrots.secretLowValue, brainrotData)
        print("Secret low value brainrot detected: " .. displayNameText .. " - " .. generationText)
    elseif priceValue >= 1000000 and priceValue < 10000000 then
        -- 1M/s to 10M/s
        table.insert(detectedBrainrots.mediumValue, brainrotData)
        print("Medium value brainrot detected: " .. displayNameText .. " - " .. generationText)
    end
end

-- Simple Server Hopping System
local Servers = "https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"
local Server, Next = nil, nil

local function ListServers(cursor)
    local attempts = 0
    local maxAttempts = 3
    
    while attempts < maxAttempts do
        attempts = attempts + 1
        local success, result = pcall(function()
            local Raw = game:HttpGet(Servers .. ((cursor and "&cursor=" .. cursor) or ""))
            return HttpService:JSONDecode(Raw)
        end)
        
        if success then
            return result
        else
            warn("‚ö†Ô∏è Server list request failed (attempt " .. attempts .. "/" .. maxAttempts .. "): " .. tostring(result))
            if string.find(tostring(result):lower(), "429") or string.find(tostring(result):lower(), "too many") then
                print("üïê Rate limited! Waiting 15 seconds before retry...")
                wait(15)
            else
                wait(3)
            end
        end
    end
    
    error("Failed to get server list after " .. maxAttempts .. " attempts")
end

-- Function to initiate server hop
function smartServerHop()
    print("ÔøΩ Searching for available servers...")
    
    local success, error = pcall(function()
        repeat
            local ServerList = ListServers(Next)
            Server = ServerList.data[math.random(1, math.max(1, math.floor(#ServerList.data / 3)))]
            Next = ServerList.nextPageCursor
        until Server
        
        if Server.playing < Server.maxPlayers and Server.id ~= game.JobId then
            print("ÔøΩ Teleporting to server: " .. Server.id .. " (" .. Server.playing .. "/" .. Server.maxPlayers .. " players)")
            TeleportService:TeleportToPlaceInstance(game.PlaceId, Server.id, Players.LocalPlayer)
            return true
        else
            print("‚ùå Server unavailable (full or same server)")
            return false
        end
    end)
    
    if success then
        print("‚úÖ Server hop initiated successfully!")
        return true
    else
        warn("‚ùå Server hop failed: " .. tostring(error))
        return false
    end
end

-- Main function to scan all plots
local function scanAllPlots()
    local plots = workspace:FindFirstChild("Plots")
    if not plots then
        warn("Plots folder not found in workspace")
        return
    end
    
    print("Starting brainrot scan...")
    
    -- Clear previous results
    detectedBrainrots.highValue = {}
    detectedBrainrots.secretLowValue = {}
    detectedBrainrots.mediumValue = {}
    
    for _, plot in pairs(plots:GetChildren()) do
        if plot:IsA("Model") then
            local plotId = plot.Name
            print("Scanning plot: " .. plotId)
            
            local animalPodiums = plot:FindFirstChild("AnimalPodiums")
            if animalPodiums then
                -- Find the highest numbered podium (up to 28)
                for i = 1, 28 do
                    local podium = animalPodiums:FindFirstChild(tostring(i))
                    if podium then
                        local base = podium:FindFirstChild("Base")
                        if base then
                            local spawn = base:FindFirstChild("Spawn")
                            if spawn then
                                local attachment = spawn:FindFirstChild("Attachment")
                                if attachment then
                                    local animalOverhead = attachment:FindFirstChild("AnimalOverhead")
                                    if animalOverhead then
                                        checkAnimal(animalOverhead, plotId, i, plot)
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    
    print("Brainrot scan completed!")
    
    -- Check if any brainrots were found
    local totalFound = #detectedBrainrots.highValue + #detectedBrainrots.secretLowValue + #detectedBrainrots.mediumValue
    
    if totalFound > 0 then
        -- Send category embeds
        print("Sending Discord embeds...")
        sendCategoryEmbed(webhooks.highValue, "highValue", detectedBrainrots.highValue)
        wait(1) -- Small delay between embeds
        sendCategoryEmbed(webhooks.secretLowValue, "secretLowValue", detectedBrainrots.secretLowValue)
        wait(1)
        sendCategoryEmbed(webhooks.mediumValue, "mediumValue", detectedBrainrots.mediumValue)
        
        print("All embeds sent!")
        print("Found " .. totalFound .. " brainrots! Server hopping...")
        
        -- Wait a bit before server hopping
        wait(3)
        
        
        -- Queue script to auto-execute after server hop
        
        -- Smart server hop
        local hopSuccess = smartServerHop()
        if not hopSuccess then
            print("‚ö†Ô∏è Server hop failed, continuing scan in current server...")
        end
    else
        print("No brainrots found, server hopping...")
        wait(2)
        
        -- Queue script to auto-execute after server hop
        -- Smart server hop
        local hopSuccess = smartServerHop()
        if not hopSuccess then
            print("‚ö†Ô∏è Server hop failed, continuing scan in current server...")
        end
    end
end

-- Function to continuously run the scanner with server hopping
local function continuousScanner()
    while true do
        local success, error = pcall(scanAllPlots)
        if not success then
            warn("Error during scan: " .. tostring(error))
            print("Retrying in 5 seconds...")
            wait(5)
        else
            print("‚úÖ Scan completed successfully!")
        end
        
        -- Always wait before next scan (whether teleport happened or not)
        print("‚è≥ Waiting 10 seconds before next scan to avoid rate limits...")
        wait(10)
        
        -- Reset server variables for fresh search
        Server, Next = nil, nil
    end
end

-- Run the continuous scanner
continuousScanner()
